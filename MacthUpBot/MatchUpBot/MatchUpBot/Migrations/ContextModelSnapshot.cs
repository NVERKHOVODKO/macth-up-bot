// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MatchUpBot.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.BlanksShowingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ReceivedUserTgId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShownUserTgId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedUserTgId");

                    b.HasIndex("ShownUserTgId");

                    b.ToTable("BlanksShowingHistory");
                });

            modelBuilder.Entity("Entities.CardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpirationTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Entities.InterestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("Entities.InterestWeightEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("ArtWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("CookingWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("FashionWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("HistoryWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("LiteratureWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("MovieWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("MusicWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("NatureWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("PhotoWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("PsychologyWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("ReligionWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("ScienceWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("SportWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("TechnologiesWeight")
                        .HasColumnType("smallint");

                    b.Property<byte>("TravelWeight")
                        .HasColumnType("smallint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("InterestWeightEntities");
                });

            modelBuilder.Entity("Entities.LikesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("LikedByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikedUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LikedByUserId");

                    b.HasIndex("LikedUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Property<long>("TgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TgId"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GenderOfInterest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsZodiacSignMatters")
                        .HasColumnType("boolean");

                    b.Property<long>("LastShowedBlankTgId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<string>("TgUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZodiacSign")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TgId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.UserInterestsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InterestId")
                        .HasColumnType("uuid");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InterestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInterestsEntities");
                });

            modelBuilder.Entity("Entities.BlanksShowingHistory", b =>
                {
                    b.HasOne("Entities.UserEntity", "ReceivedUser")
                        .WithMany()
                        .HasForeignKey("ReceivedUserTgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserEntity", "ShownUser")
                        .WithMany()
                        .HasForeignKey("ShownUserTgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivedUser");

                    b.Navigation("ShownUser");
                });

            modelBuilder.Entity("Entities.CardEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.InterestWeightEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "User")
                        .WithOne("InterestWeight")
                        .HasForeignKey("Entities.InterestWeightEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.LikesEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "Liker")
                        .WithMany("LikedUsers")
                        .HasForeignKey("LikedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.UserEntity", "LikedUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("LikedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LikedUser");

                    b.Navigation("Liker");
                });

            modelBuilder.Entity("Entities.UserInterestsEntity", b =>
                {
                    b.HasOne("Entities.InterestEntity", "Interest")
                        .WithMany("UserInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.UserEntity", "User")
                        .WithMany("UserInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.InterestEntity", b =>
                {
                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Navigation("InterestWeight")
                        .IsRequired();

                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("UserInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
